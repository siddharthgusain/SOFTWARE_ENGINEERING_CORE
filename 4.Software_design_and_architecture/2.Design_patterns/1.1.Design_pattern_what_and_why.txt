-> Designing object oriented software is hard.
-> Designing Reusable object oriented software is even harder.E.g:- REDUX , REACT , any GUI library
-> Understanding design patterns will let us become framework/library CREATOR rather than only 
CONSUMER.
-> Consequently, we'll find recurring patterns of classes and communicating objects in many 
object-oriented systems.
-> These patterns solve specific design problems and make object-oriented designs more flexible,
elegant, and ultimately reusable.
-> Design patterns are way of organizing classes and objects , to design or solve a particular 
problem or system.

Design Patterns
Design Patterns differ from Architectural Patterns in their scope, they are more localized, 
they have less impact on the code base, they impact a specific section of the code base, 
for example:

* How to instantiate an object when we only know what type needs to be instantiated at run time 
(maybe a Factory Class?);
* How to make an object behave differently according to its state (maybe a state machine, or a 
Strategy Pattern?).
