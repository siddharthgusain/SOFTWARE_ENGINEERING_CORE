-> Now the program is present in memory(RAM) in terms of machine instruction set.
-> Now CPU will fetch the program instructions one by one.
-> For simplicity we are considering that the whole program is present in memory.Modern system doesnt work like
that ,they use virtual memory implementation.

NOTE:- Right now we are talking about single threaded synchronous programs (like the programs in early computing days).
-> During early computing days , people used to load small programs into some memory and connect that memory to cpu , Cpu will 
start executing the program from starting address of the RAM and the CPU goes through following cycle:----->

-> Program counter(PC) is loaded with first instruction address.
-> Instruction is FETCHED INTO IR(instruction register). ----> Fetch phase
-> Program counter now pointed to next instruction by increament.
-> Decoder of the CPU decodes the instruction from IR ---> Decode phase
-> Instruction is Executed according to its type ---> Execution phase.
-> Write back the result to Register File ---> Write back phase.
-> Fetch next instruction using address present in PC and continues.

NOTE:- EACH PHASE CAN TAKE MORE THAN 1 CLOCK cycle depend on the type of instruction.

-> In single core CPU , to make the execution faster , pipelining architecture was introduced .
-> BY piplelining multiple instuction can be executed in parallel in ideal case.

WE HAVE PIPELINING HAZARDS LIKE:-
1. READ-WRITE 
2. WRITE-READ
3. WRITE-WRITE

AND TO SOLVE these hazard we have smart assemblers and compiler.

NOTE:- 
HERE ALSO WE ARE ASSUMING UNIPROCESSOR SYSTEM WITH ONLY ONE CORE.
WE HAVE NOT TALKED ABOUT EVENT DRIVEN/ASYNCHRONOUS PROGRAMMING OR MULTITHREADED/MULTIPROCESS PROGRAM APPLICATIONS.
-> CURRENTLY WE ARE ASSUMING GUI DOESNT EXIST OR DISPLAY DEVICES DOESNT EXIST.
-> SO THE "WHOLE PROGRAM" IS LOADED INTO RAM AND THEN THE EXECUTION BEGINS FROM STARTING POINT OF PROGRAM.
-> There is no operating system as well.

BEN EATER:- 
1. https://www.youtube.com/watch?v=35zLnS3fXeA
