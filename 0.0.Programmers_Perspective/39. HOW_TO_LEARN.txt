1. Don't try to build already existing solution from scratch 
2. Try to use already existing solution like software tools and frameworks(Git,devtools,react,webpack etc).
3. Learn in terms of abstraction as most of the solution/softwares had been built before , 
   work on top of it to remain relevant to current time.
E.g :- To solve the problem of memory management , process isolation , OS has been built already, 
try to learn the API exposed by OS to work on top of it
4. Research the already existing solution and try to improve it instead of writing it from scratch.
5. Compare previous solution with new one to find the improvement.
6. Use google properly to find already existing solution (Reusability) but understand it properly.
7. Learn the basics really well -> keep on exploring new features of "existing solution" along with using it.

NOTE:- Operating system is in direct control of hardware and contains code that can be used as a API/system calls 
by the application software.As an application developer we define what are the services we need from OS , how it 
is controlled is done by kernel code.
-> As an application developer we don't care about how to communicate with hardware , its done at the operating system
along with device drivers and hardware interfaces.
-> Its important to know what is the input to API and whats it output.
-> Going deep dive into the systems could be interesting but not required for application development.

Things to keep in mind while learning software development:-
1. Learn the language basic in which u will write the software + best practices(code reusability and readability)
2. Understand Software design /architecture and project structure(Folder structure,file structure, design patterns , coupling/cohersion btw files and modules )
3. Understand the "build process and build tools" of that software development (E.g Web apps build process, Android/IOS application build process  etc)
4. Understand Already available tools for building that kind of application(e.g Android Studio, X-code , visual studio code)
5. Read Other people code(open source) to understand project architecture and programming best practices.

WHAT TO LEARN IN SOFTWARE DESIGN:-
1. How to organise multiple files and folder , where to write which part of source code.
2. Whether to use functional or object oriented software design.
3. How to write source code in a way that files and folder are decoupled and easily maintainable and scalable.
4. Understanding the build process to write the folder and file structure carefully

WHAT TO LEARN:-
1. DS + ALGOS + MATH -> For basic logic building and optimization 
2. OOPS + Design pattern -> For software architecture, best coding practices , building your own libraries 
and complex softwares with large source code
3. Core(COA,OS,Compiler, CN , DBMS) -> To understand system and abstraction, so that any new abstraction is 
easy too understand and how it works behind the scenes
4. System design -> Aggregating All above together to build scalable softwares

HOW TO LEARN ANY CONCEPT :-
1. FIND THE WHY IT EXISTS ---> 30% (concept clearance)
2. FIND HOW IT SOLVES THE problem ---> 30%(concept clearance)
3. SEE IT PRACTICAL IMPLEMENTATION(Maybe code or something) ---> 40% (concept clearance)