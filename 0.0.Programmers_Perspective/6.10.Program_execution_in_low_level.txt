-> Now the program is present in memory(RAM) in terms of machine instruction set.
-> Now CPU will fetch the program instructions one by one.
-> FOr simplicity we are considering that the whole program is present in memory.Modern system doesnt work like
that .they use virtual memory implementation.

NOTE:- Right now we are talking about single threaded synchronous programs (like the programs in early computing days)

-> Program counter(PC) is loaded with first instruction address.
-> Instruction is FETCHED INTO IR(instruction register). ----> Fetch phase
-> Program counter now pointed to next instruction by increament.
-> Decoder of the CPU decodes the instruction from IR ---> Decode phase
-> Instruction is Executed according to its type ---> Execution phase.
-> Write back the result to Register File ---> Write back phase.
-> Fetch next instruction using address present in PC and continues.

NOTE:- EACH PHASE CAN TAKE MORE THAN 1 CLOCK cycle depend on the type of instruction.

-> In single core CPU , to make the execution faster , pipelining architecture was introduced .
-> BY piplelining multiple instuction can be executed in parallel in ideal case.

WE HAVE PIPELINING HAZARDS LIKE:-
1. READ-WRITE 
2. WRITE-READ
3. WRITE-WRITE

AND TO SOLVE these hazard we have smart assemblers and compiler.
