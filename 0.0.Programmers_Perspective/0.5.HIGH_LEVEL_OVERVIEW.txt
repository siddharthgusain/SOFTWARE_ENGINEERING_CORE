Modern Computers Have layered architecture to make things isolated and hidden from users, broadly
it can be divided into 4 layers:- 

1. Hardware Layer(Actual electronics devices)

PROCESSOR:-
-> CPU(Multi Core Pipelined Processors) +  Memory management unit (inside CPU)
-> GPU(Graphics/pixel processing)

BUS : conduction lines carrying data/Digital Signals (conducting tunnels in PCB) :-
-> Data Bus 
-> Address Bus
-> Control bus

MEMORY:- 
(i) Volatile  
-> Memory(RAM) :- Where All Application Programs as well as Operating system code is present
-> ROM -> FOR small programs like boot-loaders
-> Cache memory(inside cpu)

(ii) Non volatile
-> DISK(HDD,SSD)

(iii) External Storages(Non volatile)
-> USB , SD CARD etc.

I/0 DEVICES:-
-> INPUT DEVICES:- Keyboard ,mouse any other device, microphone, Camera
-> OUTPUT devices:- Display , Speaker, any other output device

NETWORK DEVICE  
-> Network interface card(wifi ,ethernet)

OTHERS:- 
-> Any other hardware module like web cam etc.

-> ALL these components are independent , but they are connected/interfaced together inside PCB 
known as motherboard.

2. System software layer(general purpose softwares) (System level softwares) -> For system developer
-> Operating system , loader , linker  , boot-loaders
-> Compilers
-> Drivers specific for each device to be interfaced
-> Graphics API pipeline(OPEN GL)

3. Software using OS services directly (Mid level software)
-> Browsers
-> DBMS 
-> Virtual machine softwares(Virtual Box Oracle,JVM)

4. Application software(Problem specific) ->(consumer facing products/Application software)-> For Application Developers 
-> WEB apps
-> IOS apps
-> desktop apps
-> Android apps

NOTE:- Each layer has its own complexity , and it solves the problem for developers, like graphics pipeline 
is very complex but it is hidden from developers they just need to declare the UI they want.

-> Writing programs in high level has become very easy for developers nowadays because all the layers below
the application layer is already built by big companies and is being maintained by them . E.g compiler , assembler
operating system, driver.

-> At whatever abstraction we are working , its important to know the abstraction at least one level down.
For e.g :- 
1. For web developers , we work on top of browsers , so its important to understand how browser works.
2. If we are making native desktop application, its important to know Operating system 
3. If we are building operating system , its important to know the hardware architecture(COA) and device Drivers
4. If we are working on device drivers , its important to know architecture of the device for which
we are making the driver , example GPU driver , USB driver , joystick driver etc.