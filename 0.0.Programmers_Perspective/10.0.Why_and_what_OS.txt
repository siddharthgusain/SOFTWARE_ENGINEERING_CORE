Programming in early computing hardwares:-
-> Previously programs used to be small as memory used to to be small , and the whole program is loaded to the
memory .As Memory size grows ,program size also increases. so whole program can't be loaded to the memory .
-> The implementation of virtual memory by operating system solved this problem.

Problems during early days:-

-> During the early days , computer chips are used to run only one program at a time.
-> People used to write very simple programs which are run one at a time in RAM.
-> So each program has full access to computer hardware , like monitor , RAM , HDD etc.
-> As time passed , people realise they can execute more than one program in RAM.
-> RAM size , cpu speed keeps on increasing every year , so there is a need to utilize RAM properly
-> Now To access hardware , same code will be written in all the programs 
-> Synchronisation between programs was necessary to get desired result,so Synchronisation routines should
be written in all the programs that are being executed in RAM.

Now , there was a need of priviledged software which can access hardware directly ,and can provide
interface to other application programs to use the hardware , this gives rise to Operating system.

Because of operating system , Softwares gets divided into two categories :-
1. System software -> Have direct access to hardware 
2. Application software -> Uses OS to access hardware

Solution:-
-> To solve each of these problem an software abstraction operating system was introduced.
-> Each of these problem has a specific module in OS
Some of the OS functionality:-
1. Process Management 
    -> Process scheduling
    -> Process Synchronisation
2. Deadlock handling
3. Memory(RAM) Management
4. Cache Management
5. Disk Management(file system)
6. Networking functionality(Network Stack)
7. Security

-> Early days operating system were small and less complex , currently OS does most of the hardware interaction
and is highly optimised to do so.

SYSTEM Programming VS APPLICATION Programming:- 

-> Systems programming, or system programming, is the activity of programming computer system software.
The primary distinguishing characteristic of systems programming when compared to application programming is 
that application programming aims to produce software which provides services to the user directly 
(e.g. word processor), whereas systems programming aims to produce software and software platforms which 
provide services to other software, are performance constrained, or both (e.g. operating systems, 
computational science applications, game engines, industrial automation, and software as a service 
applications).

-> Systems programming requires a great degree of hardware awareness. Its goal is to achieve efficient use of
available resources, either because the software itself is performance critical or because even small 
efficiency improvements directly transform into significant savings of time or money.

-> We are generally working on high level application program due to following reasons:-
1. The underlying software and hardware layers has been implemented in last 40 years(like PCB, operating system,drivers) and 
users are already using these hardware and operating systems, so building everything from scratch is not productive and instead its better
to make application software which solves some specific problem and make use of underlying abstractions like drivers, operating systems.
2. Very lesss development time.
3. Company Budget. 

