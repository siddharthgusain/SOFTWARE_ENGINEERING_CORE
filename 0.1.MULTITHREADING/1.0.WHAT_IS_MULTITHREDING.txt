-> Multithreading is a way of creating multiple light weight process(LWP) called threads.
-> Threads can be "user level" and "kernel level".
-> User level threads are managed by User library and Kernel level threads are managed by OS.
-> Without multithreading , programs are executed in "serial order", i.e All the instructions
in the program is executed in the same order as they appear in Program.
-> with multithreading , each function can be made indepedent to each other.
->Threads allow multiple functions to execute "concurrently".
-> Multithreading can give rise to some issues of synchronisation.

CONCURRENCY VS PARALLELISM
-> CONCURRENCY is when two or more tasks can start, run, and complete in overlapping time periods.
It doesn't necessarily mean they'll ever both be running at the same instant. 
For example, multitasking on a single-core machine.

-> PARALLELISM is when tasks literally run at the same time, e.g., on a multicore processor.
-> PARALLELISM is subset of CONCURRENCY

Note:- Even is multithreading , context switching happens so fast that it appears as parrallel
execution, anything that happens in "less than 300ms" is appeared to us as parrallel execution 
even if it is one after another.


https://stackoverflow.com/questions/41647778/does-user-level-threads-take-advantage-of-multiprocessing#:~:text=It%20simply%20means%20that%20we,done%20for%20user%2Dlevel%20threads%20.

https://youtu.be/wXBcwHwIt_I?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb--> threads
https://youtu.be/oEx5vGNFrLk?list=PLlrATfBNZ98dudnM48yfGUldqGD0S4FFb --> timer and threads
https://www.google.com/search?q=how+are+threads+executed+at+hardware+level&rlz=1C1VDKB_enIN968IN968&oq=how+are+threads+executed+at+hardware+level&aqs=chrome..69i57j33i160.12870j0j7&sourceid=chrome&ie=UTF-8