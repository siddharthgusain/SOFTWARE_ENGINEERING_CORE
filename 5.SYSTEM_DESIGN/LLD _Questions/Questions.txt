Pendency System
Pendency is a system that is able to track counts of in-flight/in-progress entities.
The system is told when to start tracking a particular entity, and when to stop. 
And at any point the system can be asked how many entities are in-progress (or in-flight). 
The system is expected to give this count, as "fast" as possible

Problem Statement
You need to design a system that is able to track pending entities.
An entity is identified using a unique ID and a list of hierarchical tags.
There are 3 parts to this problem statement. startTracking, endTracking and getCounts

When an entity is being tracked, you will be provided with an identifier for the entity, 
and a hierarchical tags associated with the entity to be tracked.

When counts are being retrieved, you will be provided with a partial list of tags, 
for which the "accumulated" counts need to be returned. 

It is permissible to have multiple entities with the same tags. 
The count should represent the total number of entities matching the tags, not just unique tag combinations. 
This partial list of tags will follow the "same hierarchy order" as given in the input. 
(Should become clear with the example shown below).

The following is a guide for the interfaces you may have in your system.

An interface to start tracking the counts for the entity. (increment count by 1)
void startTracking (Integer id, List<String> hierarchicalTags);
where,
id = Identifier of the entity
hierarchicalTags = Tags that are properties of the entity. These tags are hierarchical in nature.

An interface to stop tracking the entity that is already being tracked (reduce count by 1)
void stopTracking (Integer id);
where,
id = Identifier of the transaction

An interface to get counts of entity being tracked, that match the tags supplied
Integer getCounts (List<String> tags);
where,
tags = a hierarchy of tags, for which counts are to be retrieved

Samples
Consider the following case, The following is just a sample for your understanding.
Here we wish to track in-flight transactions happening across instruments, states and cities:

## Examples for tracking and getting counts

startTracking(1112, ["UPI", "Karnataka", "Bangalore"]); 
startTracking(2451, ["UPI", "Karnataka", "Mysore"]); 
startTracking(3421, ["UPI", "Rajasthan", "Jaipur"]); 
startTracking(1221, ["Wallet", "Karnataka", "Bangalore"]); 

getCounts(["UPI"])   # represents the counts of all pending "UPI" transactions
Output: 3
getCounts(["UPI", "Karnataka"])  # represents the counts of all pending "UPI" transactions in "Karnataka"
Output: 2
getCounts(["UPI", "Karnataka", "Bangalore"]) # represents the counts of all pending "UPI" transactions in "Karnataka" and "Bangalore"
Output: 1

getCounts(["Bangalore"]) # Does not represent a valid hierarchy in the sample
Output: 0

startTracking(4221, ["Wallet", "Karnataka", "Bangalore"]); 
stopTracking(1112); 
stopTracking(2451); 

getCounts(["UPI"])
Output: 1
getCounts(["Wallet"])
Output: 2
getCounts(["UPI", "Karnataka", "Bangalore"])
Output: 0
Note:
The system must support both partial and full tag hierarchies. 
The getCounts function should receive tags in the same hierarchical order as used for tracking entities. 
For example, if entities are tracked with tags in the order [Instrument, State, City], 
then getCounts must also follow this order, such as [Instrument], [Instrument, State], or [Instrument, State, City].

Requirements

Implement the above with appropriate assumptions for the example shown above.
1. Make your library/interfaces generic enough to be used for tracking any entities with any number of hierarchical tags. 
Not just transactions with 3 tags as shown in the example.

2. Eg: Track pending restaurant orders, and fetch counts of pending orders per location, or counts of pending orders per location 
and specific restaurant and specific cuisine startTracking(orderId, [location, restaurant, cuisine, title])

3. Think of your system as a central tool/library used by multiple teams.

4. You can simulate the operations of tracking, stopping to track and getting counts as shown in the example, using a main function or test cases

5.You should demonstrate that the code is working by using either a main method / driver program or appropriate test cases.

6. Handle error scenarios and corner cases, including "thread safety" appropriately

Things to keep in mind

Programming Language & Environment: You can use the programming language of their choice to implement the solution. Free to use any local IDEs, such as IntelliJ, or the CodeSignal platform for writing code.
Scope of Implementation: Use of REST APIs is not required, implementing equivalent functions for the functional requirements is sufficient.
Data Persistence: Persistence should be achieved using in-memory data structures (e.g., Lists, Queues, Maps), and no connection to databases is needed.
Third-Party Libraries: It is recommended to refrain from using third-party libraries like Guava or Hystrix for functional requirements.
Ambiguity in Problem Statement: If there is any ambiguity in the problem statement, you can make reasonable assumptions and proceed with the solution. These assumptions should be clearly called out in comments within the code for them to be discussed in evaluation round.
Submission Guidelines: You must zip your solution files and email them to the provided email address (Email address must be available in Interview Invite Link). This must be done even if you choose to code on Code signal Platform. Please ensure you submit your solution on time even if it is incomplete. A partial solution submitted on time is better than a complete solution submitted after time.
How you will be evaluated
You are expected to write production quality code while implementing the requirements.
We look for the following:

Completeness of functional requirements
Application of OO design principles
Code efficiency
Code readability and maintainability
Testability
Handling corner cases
Language proficiency
