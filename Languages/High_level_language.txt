1. C++ is a high level language (Not so High level)
2. It gets compiled and assembled into machine code(instruction set of machine architecture)
3. So , Compiler is the software which does all the automation work of generating machine code(Instruction set) from our source
code. 

Why write code in high level when u can write same code in assembly or machine code(actual 0 and 1)
1. Reducing Time to build application.
2. Scalability and maintainability and debugging of software over long period.
3. New developers is more familiar with HLL.
4. Using compiler and assembler softwares to automate the task of generating machine code on behalf of Us.
5. Last 40 years , compiler and assembler softwares have gone significant improvement.
6. No need for a developer to understand the machine instruction set architecture, only understand syntax of a language.
7. Porting to different CPU architecture without writing source code again, just writing compiler for that architecture.
8. Write once , use everywhere principle.
9. Teaching New generation programming is easy in HLL.


WHY CPP?
1. USED in GAME ENGINE
2. MOST Virtual machine written in CPP
3. OS written in CPP
4. MOST system software written in CPP
5. Browser that run Web application are written in CPP.
6. Java Virtual Machine is written in C/C++

Why C++ compiler is different for different OS even if both OS are Running on same CPU architecture (say x86-64)
1. Executable file format for different OS is different (Linux--> ELF format , window--> PE / COFF format)
2. Each file format is different in terms of headers and other sections added for operating system 
3. System call is different in different OS.

-> And on top of all of that, different OSs have different ideas of what an "executable" even looks like. 
An executable isn't just a bunch of opcodes, after all; where do you think all of those constant and 
pre-initialized static variables get stored? Different OSs have different ways of starting up an 
executable, and the structure of the executable is a part of that.